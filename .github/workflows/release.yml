name: release

on:
  push:
    tags:
      - "v*.*.*"
jobs:
  goreleaser:
    runs-on: ubuntu-latest
    environment: release
    steps:
      # - uses: actions/checkout@v2
      #   with:
      #     submodules: true
      # - name: setup release environment
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |-
      #     echo 'GITHUB_TOKEN=${{secrets.GITHUB_TOKEN}}' > .release-env
      # - name: draft release
      #   run: make release
      - uses: cachix/install-nix-action@v16
      - uses: cachix/cachix-action@v10
        with:
          name: cronos
          signingKey: "${{ secrets.CACHIX_SIGNING_KEY }}"
      - name: nix bundle
        env:
          PLATFORM: Linux_x86_64
        run: |
          FLAKE="github:${GITHUB_REPOSITORY}/${GITHUB_REF_NAME}"
          nix build -o cronos_${GITHUB_REF_NAME}-rocksdb_${PLATFORM}.tar.gz ${FLAKE}#cronosd-tarball
          nix build -o cronos_${GITHUB_REF_NAME}-testnet-rocksdb_${PLATFORM}.tar.gz ${FLAKE}#cronosd-testnet-tarball
          nix build -o cronos_${GITHUB_REF_NAME}-goleveldb_${PLATFORM}.tar.gz ${FLAKE}#cronosd-goleveldb-tarball
          nix build -o cronos_${GITHUB_REF_NAME}-testnet-goleveldb_${PLATFORM}.tar.gz ${FLAKE}#cronosd-testnet-goleveldb-tarball
          echo 'FILES<<EOF' >> $GITHUB_ENV
          ls -1 *.tar.gz >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          cat $GITHUB_ENV
      - name: release linux rocksdb binaries
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: "${{ env.FILES }}"

  aarch64_job:
    runs-on: ubuntu20.04
    environment: release
    name: Build aarch64 release binaries
    steps:
      - uses: uraimo/run-on-arch-action@v2
        name: Run build commands
        with:
          arch: aarch64
          distro: ubuntu20.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          setup: |
            mkdir -p "${PWD}/artifacts"

          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          shell: /bin/sh

          install: |
            apt-get update && apt-get install --no-install-recommends -y git locales curl xz-utils vim ca-certificates && apt-get clean && rm -rf /var/lib/apt/lists/*
            set -o pipefail && sh <(curl -L https://nixos.org/nix/install) --no-daemon
            echo 'experimental-features = nix-command flakes' >> /etc/nix/nix.conf
            source $HOME/.nix-profile/etc/profile.d/nix.sh
            nix-env -iA cachix -f https://cachix.org/api/v1/install
            cachix use cronos
          env: |
            PLATFORM: Linux_aarch64

          run: |
            cd /artifacts
            FLAKE="github:${GITHUB_REPOSITORY}/${GITHUB_REF_NAME}"
            nix build -o cronos_${GITHUB_REF_NAME}-rocksdb_${PLATFORM}.tar.gz ${FLAKE}#cronosd-tarball
            nix build -o cronos_${GITHUB_REF_NAME}-testnet-rocksdb_${PLATFORM}.tar.gz ${FLAKE}#cronosd-testnet-tarball
            nix build -o cronos_${GITHUB_REF_NAME}-goleveldb_${PLATFORM}.tar.gz ${FLAKE}#cronosd-goleveldb-tarball
            nix build -o cronos_${GITHUB_REF_NAME}-testnet-goleveldb_${PLATFORM}.tar.gz ${FLAKE}#cronosd-testnet-goleveldb-tarball
      - name: upload artifacts
        run: |
          echo 'FILES<<EOF' >> $GITHUB_ENV
          ls -1 artifacts/*.tar.gz >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          cat $GITHUB_ENV
      - name: release aarch64 rocksdb binaries
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: "${{ env.FILES }}"
